unit dao.mesas;

interface

uses
  Data.DB,
  ADRConn.DAO.Base,
  ADRConn.Model.Factory,
  ADRCOnn.Model.Interfaces,

  DataSet.Serialize,

  System.Classes,
  System.JSON,
  System.StrUtils,
  System.SysUtils;

type
  TADRConnDAOMesa = class(TADRConnDAOBase)
    private
    public
      function List(): TJSONArray;
      function Find(AID: Integer): TJSONObject;
      function Insert(AValue: string): TJSONObject;
      function Update(AID: Integer; AValue: string): TJSONArray;
  end;

implementation

{ TADRConnDAOMesa }

function TADRConnDAOMesa.Insert(AValue: string): TJSONObject;
const
  LSelect   = 'SELECT * FROM MESA WHERE 1=2';
var
  LDataSet   : TDataSet;
begin
  try
    LDataSet :=
      FQuery
        .SQL(LSelect)
        .OpenDataSet;
    LDataSet.LoadFromJSON(AValue);
    Result := LDataSet.ToJSONObject;
  finally
    LDataSet.Free;
  end;
end;

function TADRConnDAOMesa.List: TJSONArray;
const
  LSelect   = 'SELECT ID, NUM_MESA, OCUPADA FROM MESA ORDER BY ID';
var
  LDataSet   : TDataSet;
begin
  try
    try
      LDataset :=
        FQuery
          .SQL(LSelect)
          .OpenDataSet;

      Result := LDataset.ToJSONArray;
    except
      Result := TJSONArray.Create;
    end;
  finally
    LDataSet.Free;
  end;
end;

function TADRConnDAOMesa.FIND(AID: Integer): TJSONObject;
const
  LSelect   = 'SELECT * FROM MESA WHERE ID =:pID';
var
  LDataSet   : TDataSet;
begin
  try
    LDataset :=
      FQuery
        .SQL(LSelect)
        .ParamAsInteger('pID', AID)
        .OpenDataSet;

      if LDataSet.IsEmpty then
        Result := TJSONObject.Create
      else
        Result := LDataSet.ToJSONObject;
  finally
    LDataSet.Free;
  end;

end;


function TADRConnDAOMesa.Update(AID: Integer; AValue: string): TJSONArray;
begin

end;

end.
